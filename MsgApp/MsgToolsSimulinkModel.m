% here are some other params that might be useful.
%                      Name: already set to <model_name>
%                   Created: already set to Fri Feb 26 12:20:46 2021
%                   Creator: already set to 'mgazic'.  override to name of this script?
%            DataDictionary: 
%                      Lock: 'on'/'off'
%               LibraryInfo: 
%        LockLinksToLibrary: 
%           ModifiedComment: 
%           ModifiedHistory: 
%              ModelVersion: 1.3
%             ShowPortUnits: 'off'
%      ShowPortUnitsOnError: 'on'
%          BlockNameDataTip: 'off'
%    BlockParametersDataTip: 'off'
%            SimulationMode: 'normal'
%              EnablePacing: 'off'
%                PacingRate: 1
%          CompiledStepSize: 'auto'
%                 FixedStep: 'auto'
%       RTWGenerateCodeOnly: 'off'

% compiler flags are in CustomToolchainOptions
% they were set to:
% -c -fwrapv -std=c++03 -pedantic -Wno-long-long -fPIC -O0
% need to change to:
% -c -fwrapv -std=c++17 -pedantic -Wno-long-long -fPIC -O0
%doing a get_param('my_model', CustomToolchainOptions) gives a 1x20 cell array,
% with "C++ Compiler" in cell 7, and the settings we care about in cell 8! 
% Need to read/verify/modify/write, to make sure we actually change the right thing

% also need to either link with -z,muldefs, or change code generator to create separate
% .c and .h files for C code generation.  Simulink *CANNOT* use an inline function, and
% if I simple make a static lib with a .cpp file that includes all the generated code,
% for some reason simulink simulation build works, but rtw build (as done by 'slbuild'
% from matlab console) fails because of multiple definition of autogenerated functions.
% changing linker args to -Wl,-rpath,"$(MATLAB_ARCH_BIN)",-L"$(MATLAB_ARCH_BIN)" -Wl,-z,muldefs
% makes it ignore the multiple definitions.

classdef MsgToolsSimulinkModel < handle
    methods
        function obj = MsgToolsSimulinkModel(model_name)
            fprintf("Creating Simulink model %s\n", model_name);
            
            % create the model
            model = new_system(model_name, "Model");
            %open_system(model_name);
            set_param(model, "TargetLang", "C++");
            set_param(model, "CodeInterfacePackaging", "Reusable function");
            set_param(model, "SimTargetLang", "C++");
            set_param(model, "RTWUseSimCustomCode", "on"); % Code Generation Custom Code / Use the same custom code settings as Simulation Target

            set_param(model, "SolverType", "Fixed-step");
            %set_param(model, "StopTime", "10.0");
            %set_param(model, "GenCodeOnly", "on");
            set_param(model, "PackageGeneratedCodeAndArtifacts", "on"); % run packNGo to create zip file
            set_param(model, "PackageName", ""); % if unset, <model>.zip is used
            % whole bunch more settings exist, to configure toolchain, commands to download and execute

            % save the model
            save_system(model_name);
        end
    end
end
