/*
    ./js/headers/SerialHeader.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//headers/SerialHeader.yaml
        Template = HeaderTemplate.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
var SerialHeader = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(SerialHeader.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer);
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer);
    }
};

// how to make constants?
SerialHeader.prototype.MSG_SIZE = 16;
SerialHeader.prototype.MSG_NAME = "s/headers.SerialHeader";

SerialHeader.prototype.Init = function(){
    this.SetStartSequence(3735928559);
    this.SetID(0);
    this.SetFixedBitForMatlab(1);
    this.SetSource(0);
    this.SetDestination(0);
    this.SetPriority(0);
    this.SetDataLength(0);
    this.SetTime(0);
    this.SetHeaderChecksum(0);
    this.SetBodyChecksum(0);
};


// http://stackoverflow.com/a/130572
//  , (0 to 4294967295)
SerialHeader.prototype.GetStartSequence = function()
{
    var value = (this.m_data.getUint32(0));
    return value;
};
// To hold bitfields , (0 to 65535)
SerialHeader.prototype.GetPackedField1 = function()
{
    var value = (this.m_data.getUint16(4));
    return value;
};
//  , (0 to 32767)
SerialHeader.prototype.GetID = function()
{
    var value = (this.GetPackedField1() >> 0) & 0x7fff;
    return value;
};
//  , (0 to 1)
SerialHeader.prototype.GetFixedBitForMatlab = function()
{
    var value = (this.GetPackedField1() >> 15) & 0x1;
    return value;
};
//  , (0 to 255)
SerialHeader.prototype.GetSource = function()
{
    var value = (this.m_data.getUint8(6));
    return value;
};
//  , (0 to 255)
SerialHeader.prototype.GetDestination = function()
{
    var value = (this.m_data.getUint8(7));
    return value;
};
// To hold bitfields , (0 to 65535)
SerialHeader.prototype.GetPackedField2 = function()
{
    var value = (this.m_data.getUint16(8));
    return value;
};
//  , (0 to 3)
SerialHeader.prototype.GetPriority = function()
{
    var value = (this.GetPackedField2() >> 0) & 0x3;
    return value;
};
//  , (0 to 16383)
SerialHeader.prototype.GetDataLength = function()
{
    var value = (this.GetPackedField2() >> 2) & 0x3fff;
    return value;
};
// Rolling millisecond counter. , (0 to 65535)
SerialHeader.prototype.GetTime = function()
{
    var value = (this.m_data.getUint16(10));
    return value;
};
//  , (0 to 65535)
SerialHeader.prototype.GetHeaderChecksum = function()
{
    var value = (this.m_data.getUint16(12));
    return value;
};
//  , (0 to 65535)
SerialHeader.prototype.GetBodyChecksum = function()
{
    var value = (this.m_data.getUint16(14));
    return value;
};
//  , (0 to 4294967295)
SerialHeader.prototype.SetStartSequence = function(value)
{
    this.m_data.setUint32(0, value);
};
// To hold bitfields , (0 to 65535)
SerialHeader.prototype.SetPackedField1 = function(value)
{
    this.m_data.setUint16(4, value);
};
//  , (0 to 32767)
SerialHeader.prototype.SetID = function(value)
{
    this.SetPackedField1((this.GetPackedField1() & ~(0x7fff << 0)) | ((value & 0x7fff) << 0));
};
//  , (0 to 1)
SerialHeader.prototype.SetFixedBitForMatlab = function(value)
{
    this.SetPackedField1((this.GetPackedField1() & ~(0x1 << 15)) | ((value & 0x1) << 15));
};
//  , (0 to 255)
SerialHeader.prototype.SetSource = function(value)
{
    this.m_data.setUint8(6, value);
};
//  , (0 to 255)
SerialHeader.prototype.SetDestination = function(value)
{
    this.m_data.setUint8(7, value);
};
// To hold bitfields , (0 to 65535)
SerialHeader.prototype.SetPackedField2 = function(value)
{
    this.m_data.setUint16(8, value);
};
//  , (0 to 3)
SerialHeader.prototype.SetPriority = function(value)
{
    this.SetPackedField2((this.GetPackedField2() & ~(0x3 << 0)) | ((value & 0x3) << 0));
};
//  , (0 to 16383)
SerialHeader.prototype.SetDataLength = function(value)
{
    this.SetPackedField2((this.GetPackedField2() & ~(0x3fff << 2)) | ((value & 0x3fff) << 2));
};
// Rolling millisecond counter. , (0 to 65535)
SerialHeader.prototype.SetTime = function(value)
{
    this.m_data.setUint16(10, value);
};
//  , (0 to 65535)
SerialHeader.prototype.SetHeaderChecksum = function(value)
{
    this.m_data.setUint16(12, value);
};
//  , (0 to 65535)
SerialHeader.prototype.SetBodyChecksum = function(value)
{
    this.m_data.setUint16(14, value);
};
SerialHeader.prototype.SetMessageID = function(id){
    this.SetID(id & 0x7fff);
};
SerialHeader.prototype.GetMessageID = function(){
    return this.GetID();
};

// Convert to a javascript object
SerialHeader.prototype.toObject = function(){
    ret = {};
    try { ret["StartSequence"] = this.GetStartSequence(); } catch (err) {}
    try { ret["ID"] = this.GetID(); } catch (err) {}
    try { ret["FixedBitForMatlab"] = this.GetFixedBitForMatlab(); } catch (err) {}
    try { ret["Source"] = this.GetSource(); } catch (err) {}
    try { ret["Destination"] = this.GetDestination(); } catch (err) {}
    try { ret["Priority"] = this.GetPriority(); } catch (err) {}
    try { ret["DataLength"] = this.GetDataLength(); } catch (err) {}
    try { ret["Time"] = this.GetTime(); } catch (err) {}
    try { ret["HeaderChecksum"] = this.GetHeaderChecksum(); } catch (err) {}
    try { ret["BodyChecksum"] = this.GetBodyChecksum(); } catch (err) {}
    return ret;
}

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.SerialHeader = SerialHeader;
