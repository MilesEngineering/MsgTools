/*
    ./js/headers/BluetoothHeader.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//headers/BluetoothHeader.yaml
        Template = HeaderTemplate.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
var BluetoothHeader = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(BluetoothHeader.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer);
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer);
    }
};

// how to make constants?
BluetoothHeader.prototype.MSG_SIZE = 8;
BluetoothHeader.prototype.MSG_NAME = "s/headers.BluetoothHeader";

BluetoothHeader.prototype.Init = function(){
    this.SetSource(0);
    this.SetDestination(0);
    this.SetID(0);
    this.SetPriority(0);
    this.SetDataLength(0);
};


// http://stackoverflow.com/a/130572
//  , (0 to 255)
BluetoothHeader.prototype.GetSource = function()
{
    var value = (this.m_data.getUint8(0));
    return value;
};
//  , (0 to 255)
BluetoothHeader.prototype.GetDestination = function()
{
    var value = (this.m_data.getUint8(1));
    return value;
};
//  , (0 to 4294967295)
BluetoothHeader.prototype.GetID = function()
{
    var value = (this.m_data.getUint32(2));
    return value;
};
// To hold bitfields , (0 to 65535)
BluetoothHeader.prototype.GetPackedField = function()
{
    var value = (this.m_data.getUint16(6));
    return value;
};
//  , (0 to 3)
BluetoothHeader.prototype.GetPriority = function()
{
    var value = (this.GetPackedField() >> 0) & 0x3;
    return value;
};
//  , (0 to 16383)
BluetoothHeader.prototype.GetDataLength = function()
{
    var value = (this.GetPackedField() >> 2) & 0x3fff;
    return value;
};
//  , (0 to 255)
BluetoothHeader.prototype.SetSource = function(value)
{
    this.m_data.setUint8(0, value);
};
//  , (0 to 255)
BluetoothHeader.prototype.SetDestination = function(value)
{
    this.m_data.setUint8(1, value);
};
//  , (0 to 4294967295)
BluetoothHeader.prototype.SetID = function(value)
{
    this.m_data.setUint32(2, value);
};
// To hold bitfields , (0 to 65535)
BluetoothHeader.prototype.SetPackedField = function(value)
{
    this.m_data.setUint16(6, value);
};
//  , (0 to 3)
BluetoothHeader.prototype.SetPriority = function(value)
{
    this.SetPackedField((this.GetPackedField() & ~(0x3 << 0)) | ((value & 0x3) << 0));
};
//  , (0 to 16383)
BluetoothHeader.prototype.SetDataLength = function(value)
{
    this.SetPackedField((this.GetPackedField() & ~(0x3fff << 2)) | ((value & 0x3fff) << 2));
};
BluetoothHeader.prototype.SetMessageID = function(id){
    this.SetID(id & 0xffffffff);
};
BluetoothHeader.prototype.GetMessageID = function(){
    return this.GetID();
};

// Convert to a javascript object
BluetoothHeader.prototype.toObject = function(){
    ret = {};
    try { ret["Source"] = this.GetSource(); } catch (err) {}
    try { ret["Destination"] = this.GetDestination(); } catch (err) {}
    try { ret["ID"] = this.GetID(); } catch (err) {}
    try { ret["Priority"] = this.GetPriority(); } catch (err) {}
    try { ret["DataLength"] = this.GetDataLength(); } catch (err) {}
    return ret;
}

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.BluetoothHeader = BluetoothHeader;
