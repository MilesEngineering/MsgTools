/*
    ./js/headers/TaxonomyHeader.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//headers/TaxonomyHeader.yaml
        Template = HeaderTemplate.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
var TaxonomyHeader = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(TaxonomyHeader.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer);
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer);
    }
};

// how to make constants?
TaxonomyHeader.prototype.MSG_SIZE = 4;
TaxonomyHeader.prototype.MSG_NAME = "s/headers.TaxonomyHeader";

TaxonomyHeader.prototype.Init = function(){
};


// http://stackoverflow.com/a/130572
TaxonomyHeader.Families = {};
TaxonomyHeader.Families["Canidae"] = 1;
TaxonomyHeader.Families["Felidae"] = 2;
TaxonomyHeader.Families["Ursidae"] = 4;
TaxonomyHeader.ReverseFamilies = {};
for(key in TaxonomyHeader.Families) {
    TaxonomyHeader.ReverseFamilies[TaxonomyHeader.Families[key]] = key;
}

//  , (0 to 255)
TaxonomyHeader.prototype.GetFamily = function(enumAsInt=false)
{
    var value = (this.m_data.getUint8(0));
    if(!enumAsInt)
    if(value in TaxonomyHeader.ReverseFamilies)
        value = TaxonomyHeader.ReverseFamilies[value];
    return value;
};
//  , (0 to 255)
TaxonomyHeader.prototype.GetGenus = function()
{
    var value = (this.m_data.getUint8(1));
    return value;
};
//  , (0 to 65535)
TaxonomyHeader.prototype.GetSpecies = function()
{
    var value = (this.m_data.getUint16(2));
    return value;
};
//  , (0 to 255)
TaxonomyHeader.prototype.SetFamily = function(value)
{
    if(value in TaxonomyHeader.Families)
        value = TaxonomyHeader.Families[value];
    this.m_data.setUint8(0, value);
};
//  , (0 to 255)
TaxonomyHeader.prototype.SetGenus = function(value)
{
    this.m_data.setUint8(1, value);
};
//  , (0 to 65535)
TaxonomyHeader.prototype.SetSpecies = function(value)
{
    this.m_data.setUint16(2, value);
};
TaxonomyHeader.prototype.SetMessageID = function(id){
    this.SetSpecies(id & 0xffff);
    id = id >> 16;
    this.SetGenus(id & 0xff);
    id = id >> 8;
    this.SetFamily(id & 0xff);
};
TaxonomyHeader.prototype.GetMessageID = function(){
    return ((((this.GetFamily(1))<<8)+this.GetGenus())<<16)+this.GetSpecies();
};

// Convert to a javascript object
TaxonomyHeader.prototype.toObject = function(){
    ret = {};
    try { ret["Family"] = this.GetFamily(); } catch (err) {}
    try { ret["Genus"] = this.GetGenus(); } catch (err) {}
    try { ret["Species"] = this.GetSpecies(); } catch (err) {}
    return ret;
}

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.TaxonomyHeader = TaxonomyHeader;
