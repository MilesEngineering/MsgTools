/*
    ./js/Network/LogStatus.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//Network/LogStatus.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var LogStatus = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+LogStatus.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(LogStatus.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[4294967048] = LogStatus

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(4294967048,LogStatus)

// how to make constants?
LogStatus.prototype.MSG_ID = 4294967048;
LogStatus.prototype.MSG_SIZE = 66;
LogStatus.prototype.MSG_NAME = "s/Network.LogStatus";

LogStatus.prototype.MsgName = function(){
    return "s/Network.LogStatus";
}

LogStatus.prototype.Init = function(){
};


// http://stackoverflow.com/a/130572
LogStatus.LogFileTypes = {};
LogStatus.LogFileTypes["Binary"] = 0;
LogStatus.LogFileTypes["JSON"] = 1;
LogStatus.ReverseLogFileTypes = {};
for(key in LogStatus.LogFileTypes) {
    LogStatus.ReverseLogFileTypes[LogStatus.LogFileTypes[key]] = key;
}

//  Boolean, (0 to 255)
LogStatus.prototype.GetLogOpen = function()
{
    var value = (this.m_data.getUint8(0));
    return value;
};
//  , (0 to 255)
LogStatus.prototype.GetLogFileType = function(enumAsInt=false)
{
    var value = (this.m_data.getUint8(1));
    if(!enumAsInt)
    if(value in LogStatus.ReverseLogFileTypes)
        value = LogStatus.ReverseLogFileTypes[value];
    return value;
};
// The name of the log file. ASCII, (0 to 255)
LogStatus.prototype.GetLogFileName = function(idx)
{
    var value = (this.m_data.getUint8(2+idx*1));
    return value;
};
// The name of the log file. ASCII, (0 to 255)
LogStatus.prototype.GetLogFileNameString = function()
{
    var value = '';
    for(i=0; i<64 && i<this.hdr.GetDataLength()-2; i++)
    {
        nextChar = String.fromCharCode(this.GetLogFileName(i));
        if(nextChar == '\0')
            break;
        value += nextChar;
    }
    return value;
};
//  Boolean, (0 to 255)
LogStatus.prototype.SetLogOpen = function(value)
{
    this.m_data.setUint8(0, value);
};
//  , (0 to 255)
LogStatus.prototype.SetLogFileType = function(value)
{
    if(value in LogStatus.LogFileTypes)
        value = LogStatus.LogFileTypes[value];
    this.m_data.setUint8(1, value);
};
// The name of the log file. ASCII, (0 to 255)
LogStatus.prototype.SetLogFileName = function(value, idx)
{
    this.m_data.setUint8(2+idx*1, value);
};
// The name of the log file. ASCII, (0 to 255)
LogStatus.prototype.SetLogFileNameString = function(value)
{
    for(i=0; i<64 && i<value.length; i++)
    {
        this.SetLogFileName(value[i].charCodeAt(0), i);
    }
};

// Convert to a javascript object
LogStatus.prototype.toObject = function(){
    ret = {};
    try { ret["LogOpen"] = this.GetLogOpen(); } catch (err) {}
    try { ret["LogFileType"] = this.GetLogFileType(); } catch (err) {}
    try { ret["LogFileName"] = this.GetLogFileNameString(); } catch (err) {}
    return ret;
}

// Reflection information
LogStatus.prototype.fields = [
    {name:"LogOpen",type:"int",units:"Boolean",minVal:"0",maxVal:"255",description:"",get:"GetLogOpen",set:"SetLogOpen",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"LogFileType",type:"enumeration",units:"",minVal:"0",maxVal:"255",description:"",get:"GetLogFileType",set:"SetLogFileType",count:1, bitfieldInfo : [], enumLookup : [LogStatus.LogFileTypes, LogStatus.ReverseLogFileTypes]},
    {name:"LogFileName",type:"string",units:"ASCII",minVal:"0",maxVal:"255",description:"The name of the log file.",get:"GetLogFileNameString",set:"SetLogFileNameString",count:1, bitfieldInfo : [], enumLookup : []}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.LogStatus = LogStatus;
