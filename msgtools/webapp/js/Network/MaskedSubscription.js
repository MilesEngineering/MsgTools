/*
    ./js/Network/MaskedSubscription.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//Network/MaskedSubscription.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var MaskedSubscription = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+MaskedSubscription.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(MaskedSubscription.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[4294967043] = MaskedSubscription

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(4294967043,MaskedSubscription)

// how to make constants?
MaskedSubscription.prototype.MSG_ID = 4294967043;
MaskedSubscription.prototype.MSG_SIZE = 8;
MaskedSubscription.prototype.MSG_NAME = "s/Network.MaskedSubscription";

MaskedSubscription.prototype.MsgName = function(){
    return "s/Network.MaskedSubscription";
}

MaskedSubscription.prototype.Init = function(){
};


// http://stackoverflow.com/a/130572
// The mask of the ID you'd like to receive.  0=Don't care, 1=Must match. , (0 to 4294967295)
MaskedSubscription.prototype.GetMask = function()
{
    var value = (this.m_data.getUint32(0));
    return value;
};
// The value of the ID you'd like to receive. , (0 to 4294967295)
MaskedSubscription.prototype.GetValue = function()
{
    var value = (this.m_data.getUint32(4));
    return value;
};
// The mask of the ID you'd like to receive.  0=Don't care, 1=Must match. , (0 to 4294967295)
MaskedSubscription.prototype.SetMask = function(value)
{
    this.m_data.setUint32(0, value);
};
// The value of the ID you'd like to receive. , (0 to 4294967295)
MaskedSubscription.prototype.SetValue = function(value)
{
    this.m_data.setUint32(4, value);
};

// Convert to a javascript object
MaskedSubscription.prototype.toObject = function(){
    ret = {};
    try { ret["Mask"] = this.GetMask(); } catch (err) {}
    try { ret["Value"] = this.GetValue(); } catch (err) {}
    return ret;
}

// Reflection information
MaskedSubscription.prototype.fields = [
    {name:"Mask",type:"int",units:"",minVal:"0",maxVal:"4294967295",description:"The mask of the ID you'd like to receive.  0=Don't care, 1=Must match.",get:"GetMask",set:"SetMask",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"Value",type:"int",units:"",minVal:"0",maxVal:"4294967295",description:"The value of the ID you'd like to receive.",get:"GetValue",set:"SetValue",count:1, bitfieldInfo : [], enumLookup : []}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.MaskedSubscription = MaskedSubscription;
