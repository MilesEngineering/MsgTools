/*
    ./js/Network/Note.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//Network/Note.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var Note = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+Note.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(Note.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[4294967047] = Note

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(4294967047,Note)

// how to make constants?
Note.prototype.MSG_ID = 4294967047;
Note.prototype.MSG_SIZE = 128;
Note.prototype.MSG_NAME = "s/Network.Note";

Note.prototype.MsgName = function(){
    return "s/Network.Note";
}

Note.prototype.Init = function(){
};


// http://stackoverflow.com/a/130572
// The note to log. ASCII, (0 to 255)
Note.prototype.GetText = function(idx)
{
    var value = (this.m_data.getUint8(0+idx*1));
    return value;
};
// The note to log. ASCII, (0 to 255)
Note.prototype.GetTextString = function()
{
    var value = '';
    for(i=0; i<128 && i<this.hdr.GetDataLength()-0; i++)
    {
        nextChar = String.fromCharCode(this.GetText(i));
        if(nextChar == '\0')
            break;
        value += nextChar;
    }
    return value;
};
// The note to log. ASCII, (0 to 255)
Note.prototype.SetText = function(value, idx)
{
    this.m_data.setUint8(0+idx*1, value);
};
// The note to log. ASCII, (0 to 255)
Note.prototype.SetTextString = function(value)
{
    for(i=0; i<128 && i<value.length; i++)
    {
        this.SetText(value[i].charCodeAt(0), i);
    }
};

// Convert to a javascript object
Note.prototype.toObject = function(){
    ret = {};
    try { ret["Text"] = this.GetTextString(); } catch (err) {}
    return ret;
}

// Reflection information
Note.prototype.fields = [
    {name:"Text",type:"string",units:"ASCII",minVal:"0",maxVal:"255",description:"The note to log.",get:"GetTextString",set:"SetTextString",count:1, bitfieldInfo : [], enumLookup : []}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.Note = Note;
