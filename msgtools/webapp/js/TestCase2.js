/*
    ./js/TestCase2.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//TestCase2.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var TestCase2 = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+TestCase2.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(TestCase2.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[4294967193] = TestCase2

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(4294967193,TestCase2)

// how to make constants?
TestCase2.prototype.MSG_ID = 4294967193;
TestCase2.prototype.MSG_SIZE = 24;
TestCase2.prototype.MSG_NAME = "s.TestCase2";

TestCase2.prototype.MsgName = function(){
    return "s.TestCase2";
}

TestCase2.prototype.Init = function(){
};


// http://stackoverflow.com/a/130572
TestCase2.TestEnum = {};
TestCase2.TestEnum["Val0"] = 0;
TestCase2.TestEnum["Val1"] = 1;
TestCase2.TestEnum["Val2"] = 2;
TestCase2.TestEnum["Val3"] = 3;
TestCase2.ReverseTestEnum = {};
for(key in TestCase2.TestEnum) {
    TestCase2.ReverseTestEnum[TestCase2.TestEnum[key]] = key;
}
TestCase2.TestEnumTwo = {};
TestCase2.TestEnumTwo["Start"] = 0;
TestCase2.TestEnumTwo["Stop"] = 1;
TestCase2.ReverseTestEnumTwo = {};
for(key in TestCase2.TestEnumTwo) {
    TestCase2.ReverseTestEnumTwo[TestCase2.TestEnumTwo[key]] = key;
}

// Test Field 1 enumeration, (1 to 158212)
TestCase2.prototype.GetF1 = function(enumAsInt=false)
{
    var value = (this.m_data.getUint32(0));
    if(!enumAsInt)
    if(value in TestCase2.ReverseTestEnum)
        value = TestCase2.ReverseTestEnum[value];
    return value;
};
// Test Field 2 m/s, (0.0 to 1.0)
TestCase2.prototype.GetF2 = function(idx)
{
    var value = (this.m_data.getFloat32(4+idx*4));
    return value;
};
// Test Field 3 cm, (0.0 to 1.0)
TestCase2.prototype.GetF3 = function()
{
    var value = ((this.m_data.getUint16(16)) * 10.0);
    return value;
};
// Test Field 4 meters, (20.0 to 25520.0)
TestCase2.prototype.GetF4 = function()
{
    var value = (((this.m_data.getUint8(18)) * 100.0) + 20.0);
    return value;
};
// With a reaaaally long description with spaces and stuff Hz, (0 to 255)
TestCase2.prototype.GetField5 = function()
{
    var value = (this.m_data.getUint8(19));
    return value;
};
// Test Field 6 enumeration, (0 to 4294967295)
TestCase2.prototype.GetField6 = function(enumAsInt=false)
{
    var value = (this.m_data.getUint32(20));
    if(!enumAsInt)
    if(value in TestCase2.ReverseTestEnumTwo)
        value = TestCase2.ReverseTestEnumTwo[value];
    return value;
};
// Test Field 1 enumeration, (1 to 158212)
TestCase2.prototype.SetF1 = function(value)
{
    if(value in TestCase2.TestEnum)
        value = TestCase2.TestEnum[value];
    this.m_data.setUint32(0, value);
};
// Test Field 2 m/s, (0.0 to 1.0)
TestCase2.prototype.SetF2 = function(value, idx)
{
    this.m_data.setFloat32(4+idx*4, value);
};
// Test Field 3 cm, (0.0 to 1.0)
TestCase2.prototype.SetF3 = function(value)
{
    this.m_data.setUint16(16, value / 10.0);
};
// Test Field 4 meters, (20.0 to 25520.0)
TestCase2.prototype.SetF4 = function(value)
{
    this.m_data.setUint8(18, (value - 20.0) / 100.0);
};
// With a reaaaally long description with spaces and stuff Hz, (0 to 255)
TestCase2.prototype.SetField5 = function(value)
{
    this.m_data.setUint8(19, value);
};
// Test Field 6 enumeration, (0 to 4294967295)
TestCase2.prototype.SetField6 = function(value)
{
    if(value in TestCase2.TestEnumTwo)
        value = TestCase2.TestEnumTwo[value];
    this.m_data.setUint32(20, value);
};

// Convert to a javascript object
TestCase2.prototype.toObject = function(){
    ret = {};
    try { ret["F1"] = this.GetF1(); } catch (err) {}
    try { ret["F2"] = []; } catch (err) {}
    try { 
        for(i=0; i<3; i++)
            ret["F2"][i] = this.GetF2(i);
    } catch (err) {}
    try { ret["F3"] = this.GetF3(); } catch (err) {}
    try { ret["F4"] = this.GetF4(); } catch (err) {}
    try { ret["Field5"] = this.GetField5(); } catch (err) {}
    try { ret["Field6"] = this.GetField6(); } catch (err) {}
    return ret;
}

// Reflection information
TestCase2.prototype.fields = [
    {name:"F1",type:"enumeration",units:"enumeration",minVal:"1",maxVal:"158212",description:"Test Field 1",get:"GetF1",set:"SetF1",count:1, bitfieldInfo : [], enumLookup : [TestCase2.TestEnum, TestCase2.ReverseTestEnum]},
    {name:"F2",type:"float",units:"m/s",minVal:"0.0",maxVal:"1.0",description:"Test Field 2",get:"GetF2",set:"SetF2",count:3, bitfieldInfo : [], enumLookup : []},
    {name:"F3",type:"float",units:"cm",minVal:"0.0",maxVal:"1.0",description:"Test Field 3",get:"GetF3",set:"SetF3",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"F4",type:"float",units:"meters",minVal:"20.0",maxVal:"25520.0",description:"Test Field 4",get:"GetF4",set:"SetF4",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"Field5",type:"int",units:"Hz",minVal:"0",maxVal:"255",description:"With a reaaaally long description with spaces and stuff",get:"GetField5",set:"SetField5",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"Field6",type:"enumeration",units:"enumeration",minVal:"0",maxVal:"4294967295",description:"Test Field 6",get:"GetField6",set:"SetField6",count:1, bitfieldInfo : [], enumLookup : [TestCase2.TestEnumTwo, TestCase2.ReverseTestEnumTwo]}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.TestCase2 = TestCase2;
