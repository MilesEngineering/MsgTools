/*
    ./js/Taxonomy/Canidae/Wolf.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//Taxonomy/Canidae/Wolf.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var Wolf = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+Wolf.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(Wolf.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[16842753] = Wolf

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(16842753,Wolf)

// how to make constants?
Wolf.prototype.MSG_ID = 16842753;
Wolf.prototype.MSG_SIZE = 2;
Wolf.prototype.MSG_NAME = "s/Taxonomy/Canidae.Wolf";

Wolf.prototype.MsgName = function(){
    return "s/Taxonomy/Canidae.Wolf";
}

Wolf.prototype.Init = function(){
};


// http://stackoverflow.com/a/130572
Wolf.IDs = {};
Wolf.IDs["Family"] = 1;
Wolf.IDs["Genus"] = 1;
Wolf.IDs["Species"] = 1;
Wolf.ReverseIDs = {};
for(key in Wolf.IDs) {
    Wolf.ReverseIDs[Wolf.IDs[key]] = key;
}

//  , (0 to 255)
Wolf.prototype.GetHeight = function()
{
    var value = (this.m_data.getUint8(0));
    return value;
};
//  , (0 to 255)
Wolf.prototype.GetWeight = function()
{
    var value = (this.m_data.getUint8(1));
    return value;
};
//  , (0 to 255)
Wolf.prototype.SetHeight = function(value)
{
    this.m_data.setUint8(0, value);
};
//  , (0 to 255)
Wolf.prototype.SetWeight = function(value)
{
    this.m_data.setUint8(1, value);
};

// Convert to a javascript object
Wolf.prototype.toObject = function(){
    ret = {};
    try { ret["Height"] = this.GetHeight(); } catch (err) {}
    try { ret["Weight"] = this.GetWeight(); } catch (err) {}
    return ret;
}

// Reflection information
Wolf.prototype.fields = [
    {name:"Height",type:"int",units:"",minVal:"0",maxVal:"255",description:"",get:"GetHeight",set:"SetHeight",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"Weight",type:"int",units:"",minVal:"0",maxVal:"255",description:"",get:"GetWeight",set:"SetWeight",count:1, bitfieldInfo : [], enumLookup : []}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.Wolf = Wolf;
