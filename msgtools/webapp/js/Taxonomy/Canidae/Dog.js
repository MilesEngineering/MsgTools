/*
    ./js/Taxonomy/Canidae/Dog.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//Taxonomy/Canidae/Dog.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var Dog = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+Dog.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(Dog.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[16842754] = Dog

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(16842754,Dog)

// how to make constants?
Dog.prototype.MSG_ID = 16842754;
Dog.prototype.MSG_SIZE = 18;
Dog.prototype.MSG_NAME = "s/Taxonomy/Canidae.Dog";

Dog.prototype.MsgName = function(){
    return "s/Taxonomy/Canidae.Dog";
}

Dog.prototype.Init = function(){
};


// http://stackoverflow.com/a/130572
Dog.Foods = {};
Dog.Foods["Steak"] = 1;
Dog.Foods["Bacon"] = 2;
Dog.ReverseFoods = {};
for(key in Dog.Foods) {
    Dog.ReverseFoods[Dog.Foods[key]] = key;
}
Dog.Families = {};
Dog.Families["Canidae"] = 1;
Dog.Families["Felidae"] = 2;
Dog.Families["Ursidae"] = 4;
Dog.ReverseFamilies = {};
for(key in Dog.Families) {
    Dog.ReverseFamilies[Dog.Families[key]] = key;
}
Dog.IDs = {};
Dog.IDs["Family"] = 1;
Dog.IDs["Genus"] = 1;
Dog.IDs["Species"] = 2;
Dog.ReverseIDs = {};
for(key in Dog.IDs) {
    Dog.ReverseIDs[Dog.IDs[key]] = key;
}

//  , (-128 to 127)
Dog.prototype.GetFavoriteFood = function(enumAsInt=false)
{
    var value = (this.m_data.getInt8(0));
    if(!enumAsInt)
    if(value in Dog.ReverseFoods)
        value = Dog.ReverseFoods[value];
    return value;
};
//  ASCII, (0 to 255)
Dog.prototype.GetName = function(idx)
{
    var value = (this.m_data.getUint8(1+idx*1));
    return value;
};
//  ASCII, (0 to 255)
Dog.prototype.GetNameString = function()
{
    var value = '';
    for(i=0; i<16 && i<this.hdr.GetDataLength()-1; i++)
    {
        nextChar = String.fromCharCode(this.GetName(i));
        if(nextChar == '\0')
            break;
        value += nextChar;
    }
    return value;
};
//  , (0 to 255)
Dog.prototype.GetFriendFamily = function(enumAsInt=false)
{
    var value = (this.m_data.getUint8(17));
    if(!enumAsInt)
    if(value in Dog.ReverseFamilies)
        value = Dog.ReverseFamilies[value];
    return value;
};
//  , (-128 to 127)
Dog.prototype.SetFavoriteFood = function(value)
{
    if(value in Dog.Foods)
        value = Dog.Foods[value];
    this.m_data.setInt8(0, value);
};
//  ASCII, (0 to 255)
Dog.prototype.SetName = function(value, idx)
{
    this.m_data.setUint8(1+idx*1, value);
};
//  ASCII, (0 to 255)
Dog.prototype.SetNameString = function(value)
{
    for(i=0; i<16 && i<value.length; i++)
    {
        this.SetName(value[i].charCodeAt(0), i);
    }
};
//  , (0 to 255)
Dog.prototype.SetFriendFamily = function(value)
{
    if(value in Dog.Families)
        value = Dog.Families[value];
    this.m_data.setUint8(17, value);
};

// Convert to a javascript object
Dog.prototype.toObject = function(){
    ret = {};
    try { ret["FavoriteFood"] = this.GetFavoriteFood(); } catch (err) {}
    try { ret["Name"] = this.GetNameString(); } catch (err) {}
    try { ret["FriendFamily"] = this.GetFriendFamily(); } catch (err) {}
    return ret;
}

// Reflection information
Dog.prototype.fields = [
    {name:"FavoriteFood",type:"enumeration",units:"",minVal:"-128",maxVal:"127",description:"",get:"GetFavoriteFood",set:"SetFavoriteFood",count:1, bitfieldInfo : [], enumLookup : [Dog.Foods, Dog.ReverseFoods]},
    {name:"Name",type:"string",units:"ASCII",minVal:"0",maxVal:"255",description:"",get:"GetNameString",set:"SetNameString",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"FriendFamily",type:"enumeration",units:"",minVal:"0",maxVal:"255",description:"",get:"GetFriendFamily",set:"SetFriendFamily",count:1, bitfieldInfo : [], enumLookup : [Dog.Families, Dog.ReverseFamilies]}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.Dog = Dog;
