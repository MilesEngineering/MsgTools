/*
    ./js/TestCase3.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//TestCase3.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var TestCase3 = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+TestCase3.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(TestCase3.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[4294967192] = TestCase3

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(4294967192,TestCase3)

// how to make constants?
TestCase3.prototype.MSG_ID = 4294967192;
TestCase3.prototype.MSG_SIZE = 20;
TestCase3.prototype.MSG_NAME = "s.TestCase3";

TestCase3.prototype.MsgName = function(){
    return "s.TestCase3";
}

TestCase3.prototype.Init = function(){
    this.SetBitsA(7.1);
    this.SetBitsC(1);
};


// http://stackoverflow.com/a/130572
// Demonstrate that a 32-bit scaled integer is accessed as a double in C++ radians, (-3.141592653589793 to 3.141592652126875)
TestCase3.prototype.GetLatitude = function()
{
    var value = ((this.m_data.getInt32(0)) * 1.4629180792671596e-09);
    return value;
};
// Test Field 1 m/s, (FLT_MIN to FLT_MAX)
TestCase3.prototype.GetField1 = function(idx)
{
    var value = (this.m_data.getFloat32(4+idx*4));
    return value;
};
// Test Field 2, with bitfields , (0 to 65535)
TestCase3.prototype.GetField2 = function()
{
    var value = (this.m_data.getUint16(16));
    return value;
};
//  m/s, (0.0 to 215.355)
TestCase3.prototype.GetBitsA = function()
{
    var value = ((this.GetField2() >> 0) & 0xf * 14.357);
    return value;
};
//  m/s2, (0 to 7)
TestCase3.prototype.GetBitsB = function()
{
    var value = (this.GetField2() >> 4) & 0x7;
    return value;
};
//  bool, (0 to 1)
TestCase3.prototype.GetBitsC = function()
{
    var value = (this.GetField2() >> 7) & 0x1;
    return value;
};
// Test Field 3 m/s, (0 to 255)
TestCase3.prototype.GetField3 = function()
{
    var value = (this.m_data.getUint8(18));
    return value;
};
// With a reaaaally long description with spaces and stuff m/s, (0 to 255)
TestCase3.prototype.GetField4 = function()
{
    var value = (this.m_data.getUint8(19));
    return value;
};
// Demonstrate that a 32-bit scaled integer is accessed as a double in C++ radians, (-3.141592653589793 to 3.141592652126875)
TestCase3.prototype.SetLatitude = function(value)
{
    this.m_data.setInt32(0, value / 1.4629180792671596e-09);
};
// Test Field 1 m/s, (FLT_MIN to FLT_MAX)
TestCase3.prototype.SetField1 = function(value, idx)
{
    this.m_data.setFloat32(4+idx*4, value);
};
// Test Field 2, with bitfields , (0 to 65535)
TestCase3.prototype.SetField2 = function(value)
{
    this.m_data.setUint16(16, value);
};
//  m/s, (0.0 to 215.355)
TestCase3.prototype.SetBitsA = function(value)
{
    this.SetField2((this.GetField2() & ~(0xf << 0)) | ((value / 14.357 & 0xf) << 0));
};
//  m/s2, (0 to 7)
TestCase3.prototype.SetBitsB = function(value)
{
    this.SetField2((this.GetField2() & ~(0x7 << 4)) | ((value & 0x7) << 4));
};
//  bool, (0 to 1)
TestCase3.prototype.SetBitsC = function(value)
{
    this.SetField2((this.GetField2() & ~(0x1 << 7)) | ((value & 0x1) << 7));
};
// Test Field 3 m/s, (0 to 255)
TestCase3.prototype.SetField3 = function(value)
{
    this.m_data.setUint8(18, value);
};
// With a reaaaally long description with spaces and stuff m/s, (0 to 255)
TestCase3.prototype.SetField4 = function(value)
{
    this.m_data.setUint8(19, value);
};

// Convert to a javascript object
TestCase3.prototype.toObject = function(){
    ret = {};
    try { ret["Latitude"] = this.GetLatitude(); } catch (err) {}
    try { ret["Field1"] = []; } catch (err) {}
    try { 
        for(i=0; i<3; i++)
            ret["Field1"][i] = this.GetField1(i);
    } catch (err) {}
    try { ret["BitsA"] = this.GetBitsA(); } catch (err) {}
    try { ret["BitsB"] = this.GetBitsB(); } catch (err) {}
    try { ret["BitsC"] = this.GetBitsC(); } catch (err) {}
    try { ret["Field3"] = this.GetField3(); } catch (err) {}
    try { ret["Field4"] = this.GetField4(); } catch (err) {}
    return ret;
}

// Reflection information
TestCase3.prototype.fields = [
    {name:"Latitude",type:"float",units:"radians",minVal:"-3.141592653589793",maxVal:"3.141592652126875",description:"Demonstrate that a 32-bit scaled integer is accessed as a double in C++",get:"GetLatitude",set:"SetLatitude",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"Field1",type:"float",units:"m/s",minVal:"FLT_MIN",maxVal:"FLT_MAX",description:"Test Field 1",get:"GetField1",set:"SetField1",count:3, bitfieldInfo : [], enumLookup : []},
    {name:"Field2",type:"int",units:"",minVal:"0",maxVal:"65535",description:"Test Field 2, with bitfields",get:"GetField2",set:"SetField2",count:1, bitfieldInfo : [
        {name:"BitsA",type:"float",units:"m/s",minVal:"0.0",maxVal:"215.355",description:"",get:"GetBitsA",set:"SetBitsA", enumLookup : []},
        {name:"BitsB",type:"int",units:"m/s2",minVal:"0",maxVal:"7",description:"",get:"GetBitsB",set:"SetBitsB", enumLookup : []},
        {name:"BitsC",type:"int",units:"bool",minVal:"0",maxVal:"1",description:"",get:"GetBitsC",set:"SetBitsC", enumLookup : []}], enumLookup : []},
    {name:"Field3",type:"int",units:"m/s",minVal:"0",maxVal:"255",description:"Test Field 3",get:"GetField3",set:"SetField3",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"Field4",type:"int",units:"m/s",minVal:"0",maxVal:"255",description:"With a reaaaally long description with spaces and stuff",get:"GetField4",set:"SetField4",count:1, bitfieldInfo : [], enumLookup : []}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.TestCase3 = TestCase3;
