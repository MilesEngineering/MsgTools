/*
    ./js/TestCase1.js
    Created 25/05/2018 at 10:38:31 from:
        Messages = msgtools/parser/test/messages//TestCase1.yaml
        Template = Template.js
        Language = javascript

                     AUTOGENERATED FILE, DO NOT EDIT

*/
//import { NetworkHeader } from '../headers/NetworkHeader.js'
//import MessageDictionary from '../MessageDictionary.js'

var TestCase1 = function(buffer) {
    // have baseclass construct the buffer?
    //Message.call(this, MSG_SIZE);
        
    if (buffer==undefined)
    {
        buffer = new ArrayBuffer(NetworkHeader.prototype.MSG_SIZE+TestCase1.prototype.MSG_SIZE);
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
        this.hdr.SetMessageID(TestCase1.prototype.MSG_ID);
        this.hdr.SetDataLength(buffer.byteLength - NetworkHeader.prototype.MSG_SIZE);
        //this.InitializeTime();
        this.Init();
    }
    else
    {
        this.m_data = new DataView(buffer, NetworkHeader.prototype.MSG_SIZE);
        this.hdr = new NetworkHeader(buffer);
    }
};

// This is for 0.28.42/Messaging.js compatibility
if (typeof(MessageDictionary)!=='undefined' && MessageDictionary != null)
    // add our class to the dictionary
    MessageDictionary[123] = TestCase1

// This is for 0.29.42/msgtools.js compatibility
if (typeof msgtools === 'object')
    msgtools.registerMessage(123,TestCase1)

// how to make constants?
TestCase1.prototype.MSG_ID = 123;
TestCase1.prototype.MSG_SIZE = 18;
TestCase1.prototype.MSG_NAME = "s.TestCase1";

TestCase1.prototype.MsgName = function(){
    return "s.TestCase1";
}

TestCase1.prototype.Init = function(){
    this.SetFieldA(1);
    this.SetFieldB(2);
    for (i=0; i<5; i++)
        this.SetFieldC(3, i);
    this.SetBitsA(7.1);
    this.SetBitsC(1);
    this.SetFieldE(3.14159);
    this.SetFieldF(3.14);
};


// http://stackoverflow.com/a/130572
TestCase1.EnumA = {};
TestCase1.EnumA["OptionA"] = 1;
TestCase1.EnumA["OptionB"] = 2;
TestCase1.EnumA["OptionC"] = 4;
TestCase1.EnumA["OptionD"] = 5;
TestCase1.ReverseEnumA = {};
for(key in TestCase1.EnumA) {
    TestCase1.ReverseEnumA[TestCase1.EnumA[key]] = key;
}

//  m/s, (0 to 4294967295)
TestCase1.prototype.GetFieldA = function()
{
    var value = (this.m_data.getUint32(0));
    return value;
};
//  , (0 to 2147483647)
TestCase1.prototype.GetFABitsA = function()
{
    var value = (this.GetFieldA() >> 0) & 0x7fffffff;
    return value;
};
//  , (0 to 65535)
TestCase1.prototype.GetFieldB = function()
{
    var value = (this.m_data.getUint16(4));
    return value;
};
//  , (0 to 255)
TestCase1.prototype.GetFieldC = function(idx)
{
    var value = (this.m_data.getUint8(6+idx*1));
    return value;
};
//  , (0 to 255)
TestCase1.prototype.GetFieldD = function()
{
    var value = (this.m_data.getUint8(11));
    return value;
};
//  , (0.0 to 215.355)
TestCase1.prototype.GetBitsA = function()
{
    var value = ((this.GetFieldD() >> 0) & 0xf * 14.357);
    return value;
};
//  , (0 to 7)
TestCase1.prototype.GetBitsB = function(enumAsInt=false)
{
    var value = (this.GetFieldD() >> 4) & 0x7;
    if(!enumAsInt)
    if(value in TestCase1.ReverseEnumA)
        value = TestCase1.ReverseEnumA[value];
    return value;
};
//  , (0 to 1)
TestCase1.prototype.GetBitsC = function()
{
    var value = (this.GetFieldD() >> 7) & 0x1;
    return value;
};
//  , (0.0 to 10.0)
TestCase1.prototype.GetFieldE = function()
{
    var value = (this.m_data.getFloat32(12));
    return value;
};
//  , (1.828 to 176946.328)
TestCase1.prototype.GetFieldF = function()
{
    var value = (((this.m_data.getUint16(16)) * 2.7) + 1.828);
    return value;
};
//  m/s, (0 to 4294967295)
TestCase1.prototype.SetFieldA = function(value)
{
    this.m_data.setUint32(0, value);
};
//  , (0 to 2147483647)
TestCase1.prototype.SetFABitsA = function(value)
{
    this.SetFieldA((this.GetFieldA() & ~(0x7fffffff << 0)) | ((value & 0x7fffffff) << 0));
};
//  , (0 to 65535)
TestCase1.prototype.SetFieldB = function(value)
{
    this.m_data.setUint16(4, value);
};
//  , (0 to 255)
TestCase1.prototype.SetFieldC = function(value, idx)
{
    this.m_data.setUint8(6+idx*1, value);
};
//  , (0 to 255)
TestCase1.prototype.SetFieldD = function(value)
{
    this.m_data.setUint8(11, value);
};
//  , (0.0 to 215.355)
TestCase1.prototype.SetBitsA = function(value)
{
    this.SetFieldD((this.GetFieldD() & ~(0xf << 0)) | ((value / 14.357 & 0xf) << 0));
};
//  , (0 to 7)
TestCase1.prototype.SetBitsB = function(value)
{
    if(value in TestCase1.EnumA)
        value = TestCase1.EnumA[value];
    this.SetFieldD((this.GetFieldD() & ~(0x7 << 4)) | ((value & 0x7) << 4));
};
//  , (0 to 1)
TestCase1.prototype.SetBitsC = function(value)
{
    this.SetFieldD((this.GetFieldD() & ~(0x1 << 7)) | ((value & 0x1) << 7));
};
//  , (0.0 to 10.0)
TestCase1.prototype.SetFieldE = function(value)
{
    this.m_data.setFloat32(12, value);
};
//  , (1.828 to 176946.328)
TestCase1.prototype.SetFieldF = function(value)
{
    this.m_data.setUint16(16, (value - 1.828) / 2.7);
};

// Convert to a javascript object
TestCase1.prototype.toObject = function(){
    ret = {};
    try { ret["FABitsA"] = this.GetFABitsA(); } catch (err) {}
    try { ret["FieldB"] = this.GetFieldB(); } catch (err) {}
    try { ret["FieldC"] = []; } catch (err) {}
    try { 
        for(i=0; i<5; i++)
            ret["FieldC"][i] = this.GetFieldC(i);
    } catch (err) {}
    try { ret["BitsA"] = this.GetBitsA(); } catch (err) {}
    try { ret["BitsB"] = this.GetBitsB(); } catch (err) {}
    try { ret["BitsC"] = this.GetBitsC(); } catch (err) {}
    try { ret["FieldE"] = this.GetFieldE(); } catch (err) {}
    try { ret["FieldF"] = this.GetFieldF(); } catch (err) {}
    return ret;
}

// Reflection information
TestCase1.prototype.fields = [
    {name:"FieldA",type:"int",units:"m/s",minVal:"0",maxVal:"4294967295",description:"",get:"GetFieldA",set:"SetFieldA",count:1, bitfieldInfo : [
        {name:"FABitsA",type:"int",units:"",minVal:"0",maxVal:"2147483647",description:"",get:"GetFABitsA",set:"SetFABitsA", enumLookup : []}], enumLookup : []},
    {name:"FieldB",type:"int",units:"",minVal:"0",maxVal:"65535",description:"",get:"GetFieldB",set:"SetFieldB",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"FieldC",type:"int",units:"",minVal:"0",maxVal:"255",description:"",get:"GetFieldC",set:"SetFieldC",count:5, bitfieldInfo : [], enumLookup : []},
    {name:"FieldD",type:"int",units:"",minVal:"0",maxVal:"255",description:"",get:"GetFieldD",set:"SetFieldD",count:1, bitfieldInfo : [
        {name:"BitsA",type:"float",units:"",minVal:"0.0",maxVal:"215.355",description:"",get:"GetBitsA",set:"SetBitsA", enumLookup : []},
        {name:"BitsB",type:"enumeration",units:"",minVal:"0",maxVal:"7",description:"",get:"GetBitsB",set:"SetBitsB", enumLookup : [TestCase1.EnumA, TestCase1.ReverseEnumA]},
        {name:"BitsC",type:"int",units:"",minVal:"0",maxVal:"1",description:"",get:"GetBitsC",set:"SetBitsC", enumLookup : []}], enumLookup : []},
    {name:"FieldE",type:"float",units:"",minVal:"0.0",maxVal:"10.0",description:"",get:"GetFieldE",set:"SetFieldE",count:1, bitfieldInfo : [], enumLookup : []},
    {name:"FieldF",type:"float",units:"",minVal:"1.828",maxVal:"176946.328",description:"",get:"GetFieldF",set:"SetFieldF",count:1, bitfieldInfo : [], enumLookup : []}
]

// for react-native and node.js, we should set module.exports so our class can be accessed externally
if(typeof module != 'undefined' && typeof module.exports != 'undefined')
    module.exports.TestCase1 = TestCase1;
