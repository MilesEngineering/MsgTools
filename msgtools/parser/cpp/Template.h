/*
    <OUTPUTFILENAME>
    Created <DATE> from:
        Messages = <INPUTFILENAME>
        Template = <TEMPLATEFILENAME>
        Language = <LANGUAGEFILENAME>

                     AUTOGENERATED FILE, DO NOT EDIT

*/
#ifndef <MSGNAME>Message_H__
#define <MSGNAME>Message_H__

#include <stdint.h>
#include <cfloat>
#include "FieldAccess.h"

class <MSGNAME>Message : public Message
{
    public:
        auto static constexpr MSG_ID = <MSGID>;
        auto static constexpr MSG_SIZE = <MSGSIZE>;
        <MSGNAME>Message(int size=MSG_SIZE)
        : Message(size)
        {
            if(Exists())
            {
                SetDataLength(size);
                SetMessageID(MSG_ID);
                InitializeTime();
                Init();
            }
        }
        void Init()
        {
            <INIT_CODE>
        }
        <ENUMERATIONS>
        <FIELDINFOS>
        <ACCESSORS>
#ifdef ENABLE_REFLECTION
        static MsgInfo* ReflectionInfo()
        {
            static bool firstTime = true;
            static MsgInfo msgInfo(MSG_ID, "<MSGNAME>", "<MSGDESCRIPTION>", MSG_SIZE);
            if(firstTime)
            {
                firstTime = false;
                msgInfo.AddField(new <REFLECTION>);
            }
            return &msgInfo;
        }
#endif
};

#ifdef ENABLE_REFLECTION
class <MSGNAME>MessageReflection
{
public:
    <MSGNAME>MessageReflection()
    {
        Reflection::AddMsg(<MSGNAME>Message::ReflectionInfo());
    }
};
static <MSGNAME>MessageReflection reflection_<MSGNAME>Message;
#endif
#endif
